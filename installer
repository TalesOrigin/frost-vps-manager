#!/bin/bash

# VPS Management System Installer
# Refactored and cleaned version

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Configuration
readonly SCRIPT_NAME="VPS Manager Installer"
readonly SCRIPT_VERSION="2.0"
readonly LOG_FILE="/var/log/vps_installer.log"
readonly USER_DB="$HOME/usuarios.db"
readonly INSTALL_DIR="/usr/local/lib/vps-manager"
readonly BIN_DIR="/usr/local/bin"

# Colors for output
readonly RED='\033[1;31m'
readonly GREEN='\033[1;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[1;34m'
readonly CYAN='\033[1;36m'
readonly WHITE='\033[1;37m'
readonly NC='\033[0m' # No Color

# Logging function
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE"
}

# Error handling
error_exit() {
    echo -e "${RED}Error: $1${NC}" >&2
    log "ERROR: $1"
    exit 1
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error_exit "This script must be run as root. Use: sudo $0"
    fi
}

# Display progress bar
show_progress() {
    local duration=${1:-30}
    local message=${2:-"Processing..."}
    
    echo -ne "${YELLOW}${message} ${WHITE}["
    
    for ((i=0; i<duration; i++)); do
        echo -ne "${RED}#"
        sleep 0.1
    done
    
    echo -e "${YELLOW}] ${GREEN}DONE!${NC}"
}

# Execute command with progress bar
execute_with_progress() {
    local cmd="$1"
    local message="$2"
    
    echo -e "${CYAN}${message}${NC}"
    
    # Run command in background
    eval "$cmd" > /dev/null 2>&1 &
    local pid=$!
    
    # Show progress while command runs
    local count=0
    while kill -0 $pid 2>/dev/null; do
        echo -ne "${YELLOW}Working... ${WHITE}["
        for ((i=0; i<(count % 20); i++)); do
            echo -ne "${RED}#"
        done
        for ((i=count % 20; i<20; i++)); do
            echo -ne " "
        done
        echo -ne "${YELLOW}]\r"
        sleep 0.5
        ((count++))
    done
    
    wait $pid
    local exit_code=$?
    
    if [[ $exit_code -eq 0 ]]; then
        echo -e "${YELLOW}Working... ${WHITE}[${RED}####################${YELLOW}] ${GREEN}DONE!${NC}"
    else
        echo -e "${YELLOW}Working... ${WHITE}[${RED}####################${YELLOW}] ${RED}FAILED!${NC}"
        return $exit_code
    fi
}

# Display banner
show_banner() {
    clear
    echo -e "${BLUE}╔═══════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║${WHITE}              🌟 VPS Manager Installer 🌟              ${BLUE}║${NC}"
    echo -e "${BLUE}║${WHITE}                    Version ${SCRIPT_VERSION}                     ${BLUE}║${NC}"
    echo -e "${BLUE}╚═══════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${YELLOW}This script installs a comprehensive VPS management system${NC}"
    echo -e "${YELLOW}with network, system, and user management tools.${NC}"
    echo ""
}

# Get user confirmation
get_confirmation() {
    local prompt="$1"
    local response
    
    echo -ne "${CYAN}${prompt} [Y/N]: ${WHITE}"
    read -r response
    
    case "$response" in
        [yY]|[yY][eE][sS]) return 0 ;;
        *) return 1 ;;
    esac
}

# Check system compatibility
check_system() {
    log "Checking system compatibility..."
    
    # Check OS
    if ! command -v apt-get &> /dev/null; then
        error_exit "This installer requires a Debian/Ubuntu-based system with apt-get"
    fi
    
    # Check internet connectivity
    if ! ping -c 1 google.com &> /dev/null; then
        error_exit "Internet connection is required for installation"
    fi
    
    # Check disk space (minimum 1GB)
    local available_space
    available_space=$(df / | awk 'NR==2 {print $4}')
    if [[ $available_space -lt 1048576 ]]; then
        error_exit "Insufficient disk space. At least 1GB is required."
    fi
    
    log "System compatibility check passed"
}

# Update system packages
update_system() {
    log "Updating system packages..."
    
    execute_with_progress "apt-get update -y && apt-get upgrade -y"
    
    log "System update completed"
}

# Install required packages
install_packages() {
    log "Installing required packages..."
    
    local packages=(
        "curl" "wget" "nano" "screen" "unzip" "jq" "bc"
        "net-tools" "lsof" "htop" "iftop" "nload"
        "apache2" "cron" "figlet" "python3" "python3-pip"
        "dos2unix" "speedtest-cli"
    )
    
    local install_cmd="apt-get install -y"
    for package in "${packages[@]}"; do
        install_cmd+=" $package"
    done
    
    execute_with_progress "$install_cmd" \
        "Installing essential packages..."
    
    log "Package installation completed"
}

# Create system user for VPS management
create_system_user() {
    log "Creating system user..."
    
    local username="vps-manager"
    local home_dir="/home/$username"
    
    # Remove user if exists
    if id "$username" &>/dev/null; then
        log "User '$username' already exists, removing..."
        userdel -r "$username" 2>/dev/null || true
    fi
    
    # Create new system user
    useradd -r -m -d "$home_dir" -s /bin/bash "$username" || \
        error_exit "Failed to create system user"
    
    # Set up user environment
    mkdir -p "$home_dir/.ssh"
    chown -R "$username:$username" "$home_dir"
    chmod 700 "$home_dir/.ssh"
    
    log "System user created successfully"
}

# Handle existing user database
handle_user_database() {
    if [[ -f "$USER_DB" ]]; then
        echo -e "${YELLOW}Existing user database found!${NC}"
        echo ""
        echo -e "${WHITE}[${RED}1${WHITE}] Keep existing database${NC}"
        echo -e "${WHITE}[${RED}2${WHITE}] Create new database${NC}"
        echo ""
        
        local choice
        echo -ne "${GREEN}Choose option [1-2]: ${WHITE}"
        read -r choice
        
        case "$choice" in
            2)
                log "Creating new user database..."
                create_user_database
                ;;
            *)
                log "Keeping existing user database"
                ;;
        esac
    else
        create_user_database
    fi
}

# Create user database
create_user_database() {
    log "Creating user database..."
    
    # Create database with system users (UID >= 1000, excluding nobody)
    awk -F: '$3 >= 1000 && $1 != "nobody" { print $1 " 1" }' /etc/passwd > "$USER_DB"
    
    chmod 600 "$USER_DB"
    log "User database created"
}

# Configure firewall
configure_firewall() {
    log "Configuring firewall..."
    
    if command -v ufw &> /dev/null; then
        # Allow necessary ports
        local ports=("22" "80" "443" "3128" "8080" "8799" "8888")
        
        for port in "${ports[@]}"; do
            ufw allow "$port/tcp" &> /dev/null || true
        done
        
        log "Firewall configured"
    else
        log "UFW not found, skipping firewall configuration"
    fi
}

# Create main menu script
create_menu_script() {
    log "Creating main menu script..."
    
    mkdir -p "$INSTALL_DIR"
    
    cat > "$BIN_DIR/vps-menu" << 'EOF'
#!/bin/bash

# VPS Manager Main Menu
clear
echo -e "\033[1;34m╔══════════════════════════════════════════════════╗\033[0m"
echo -e "\033[1;34m║\033[1;33m              VPS Manager Menu                 \033[1;34m║\033[0m"
echo -e "\033[1;34m╚══════════════════════════════════════════════════╝\033[0m"
echo ""
echo -e "\033[1;32m[1]\033[0m User Management"
echo -e "\033[1;32m[2]\033[0m System Monitor"
echo -e "\033[1;32m[3]\033[0m Network Tools"
echo -e "\033[1;32m[4]\033[0m System Information"
echo -e "\033[1;32m[5]\033[0m Logs Viewer"
echo -e "\033[1;32m[0]\033[0m Exit"
echo ""
read -p "Choose option [0-5]: " option

case $option in
    1) echo "User Management - Feature coming soon!" ;;
    2) htop ;;
    3) echo "Network Tools - Feature coming soon!" ;;
    4) 
        echo "System Information:"
        echo "==================="
        uname -a
        echo ""
        df -h
        echo ""
        free -h
        ;;
    5) 
        echo "Recent system logs:"
        echo "==================="
        tail -20 /var/log/syslog
        ;;
    0) exit 0 ;;
    *) echo "Invalid option!" ;;
esac
EOF

    chmod +x "$BIN_DIR/vps-menu"
    
    # Create symlinks for convenience
    ln -sf "$BIN_DIR/vps-menu" "$BIN_DIR/menu" 2>/dev/null || true
    ln -sf "$BIN_DIR/vps-menu" "/bin/menu" 2>/dev/null || true
    
    log "Menu script created"
}

# Create status page
create_status_page() {
    log "Creating status page..."
    
    # Ensure Apache is running
    systemctl enable apache2
    systemctl start apache2
    
    # Create simple status page
    mkdir -p /var/www/html/server
    
    cat > /var/www/html/server/online << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>VPS Server Status</title>
    <meta http-equiv="refresh" content="30">
</head>
<body>
    <h1>VPS Server Status</h1>
    <script>
        fetch('/server/api/status')
            .then(response => response.json())
            .then(data => {
                document.body.innerHTML += '<p>Online Users: ' + data.users + '</p>';
                document.body.innerHTML += '<p>System Load: ' + data.load + '</p>';
                document.body.innerHTML += '<p>Last Updated: ' + new Date() + '</p>';
            })
            .catch(error => console.error('Error:', error));
    </script>
</body>
</html>
EOF
    
    log "Status page created"
}

# Cleanup and finalization
cleanup_and_finalize() {
    log "Performing cleanup and finalization..."
    
    # Clean bash history for security
    cat /dev/null > ~/.bash_history
    history -c
    
    # Set proper permissions
    chmod -R 755 "$INSTALL_DIR"
    
    # Update locate database
    updatedb &>/dev/null || true
    
    log "Installation finalization completed"
}

# Display completion message
show_completion() {
    local server_ip
    server_ip=$(curl -s ifconfig.me 2>/dev/null || echo "localhost")
    
    clear
    echo -e "${GREEN}╔══════════════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║${WHITE}              🎉 INSTALLATION COMPLETED! 🎉               ${GREEN}║${NC}"
    echo -e "${GREEN}╚══════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${YELLOW}Main Commands:${NC}"
    echo -e "${WHITE}  • ${GREEN}vps-menu${WHITE} or ${GREEN}menu${WHITE} - Launch VPS Manager${NC}"
    echo ""
    echo -e "${YELLOW}Web Interface:${NC}"
    echo -e "${WHITE}  • ${CYAN}http://${server_ip}:8888/server/online${WHITE} - Server Status${NC}"
    echo ""
    echo -e "${YELLOW}Log File:${NC}"
    echo -e "${WHITE}  • ${CYAN}$LOG_FILE${NC}"
    echo ""
    echo -e "${GREEN}Installation logged at: $(date)${NC}"
    echo ""
}

# Main installation function
main() {
    # Initialize log
    touch "$LOG_FILE"
    log "Starting VPS Manager installation..."
    
    # Check prerequisites
    check_root
    show_banner
    
    # Get user confirmation
    if ! get_confirmation "Do you want to continue with the installation?"; then
        echo -e "${YELLOW}Installation cancelled by user.${NC}"
        exit 0
    fi
    
    # Perform installation steps
    check_system
    update_system
    install_packages
    create_system_user
    handle_user_database
    configure_firewall
    create_menu_script
    create_status_page
    cleanup_and_finalize
    
    # Show completion message
    show_completion
    
    log "VPS Manager installation completed successfully"
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi